{"version":3,"sources":["components.js","App.js","serviceWorker.js","index.js"],"names":["getCountries","gql","SearchBar","useQuery","loading","error","data","useState","query","setQuery","group","setGroup","active","setActive","groupBy","e","target","value","byLanguages","_","countries","byContinent","className","placeholder","onChange","event","isEmpty","onClick","Object","entries","map","index","key","Card","props","message","filter","country","name","toLowerCase","includes","emoji","capital","phone","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"ijBAKA,IAAMA,EAAeC,YAAH,KAkBlB,SAASC,IAAa,IAAD,EACcC,YAASH,GAAlCI,EADW,EACXA,QAASC,EADE,EACFA,MAAOC,EADL,EACKA,KADL,EAEOC,mBAAS,IAFhB,mBAEZC,EAFY,KAELC,EAFK,OAGOF,mBAAS,IAHhB,mBAGZG,EAHY,KAGLC,EAHK,OAISJ,mBAAS,aAJlB,mBAIZK,EAJY,KAIJC,EAJI,KAMbC,EAAU,SAACC,GACf,GAAuB,aAAnBA,EAAEC,OAAOC,MAAsB,CACjC,IAAMC,EAAcC,IAAEL,QAAQR,EAAKc,UAAW,qBAC9CT,EAASO,GACTL,EAAU,gBACL,CACL,IAAMQ,EAAcF,IAAEL,QAAQR,EAAKc,UAAW,kBAC9CT,EAASU,GACTR,EAAU,eAId,OACE,yBAAKS,UAAU,OACb,8CACA,gEACA,2BACEA,UAAU,aACVC,YAAY,sCACZC,SAAU,SAACC,GACT,IAAyB,IAArBN,IAAEO,QAAQhB,GAAiB,CAC7B,IAAMW,EAAcF,IAAEL,QAAQR,EAAKc,UAAW,kBAC9CT,EAASU,GAEXZ,EAASgB,EAAMT,OAAOC,UAG1B,yBAAKK,UAAU,YACb,yCACA,4BACEA,UAAsB,cAAXV,EAAyB,mBAAqB,YACzDe,QAASb,EACTG,MAAM,aAHR,aAOA,4BACEK,UAAsB,aAAXV,EAAwB,mBAAqB,YACxDe,QAASb,EACTG,MAAM,YAHR,aASF,wBAAIK,UAAU,gBACXM,OAAOC,QAAQnB,GAAOoB,KAAI,WAAeC,GAAf,uBAAEC,EAAF,KAAOf,EAAP,YACzB,6BACE,wBAAIe,IAAKD,GAAQC,GACjB,kBAACC,EAAD,CAAMzB,MAAOA,EAAOF,KAAMW,EAAOZ,MAAOA,EAAOD,QAASA,UAQpE,SAAS6B,EAAKC,GACZ,OAAIA,EAAM9B,QAAgB,aACtB8B,EAAM7B,MAAa,UAAN,OAAiB6B,EAAM7B,MAAM8B,SAG5C,6BACGD,EAAM5B,KACJ8B,QAAO,SAACC,GACP,GAAoB,KAAhBH,EAAM1B,MAEH,OACL6B,EAAQC,KAAKC,cAAcC,SAASN,EAAM1B,MAAM+B,eAEzCF,OAHF,KAMRP,KAAI,SAACO,EAASN,GAAV,OACH,yBAAKT,UAAU,OAAOU,IAAKD,GACzB,4BACE,8BAAOM,EAAQI,OACf,wBAAInB,UAAU,gBAAd,IAA+Be,EAAQC,MACvC,4CAEE,uBAAGhB,UAAU,KAAb,IAAmBe,EAAQK,UAE7B,4CAEE,uBAAGpB,UAAU,KAAb,KAAoBe,EAAQM,cC3G5C,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wCAUQC,EAPH,WACV,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC1C,EAAD,QCDc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3D,GACL4D,QAAQ5D,MAAMA,EAAM8B,c","file":"static/js/main.13830b07.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport _ from 'lodash';\r\n\r\nconst getCountries = gql`\r\n  {\r\n    countries {\r\n      code\r\n      name\r\n      phone\r\n      capital\r\n      emoji\r\n      continent {\r\n        name\r\n      }\r\n      languages {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction SearchBar() {\r\n  const { loading, error, data } = useQuery(getCountries);\r\n  const [query, setQuery] = useState('');\r\n  const [group, setGroup] = useState({});\r\n  const [active, setActive] = useState('continent');\r\n\r\n  const groupBy = (e) => {\r\n    if (e.target.value === 'Language') {\r\n      const byLanguages = _.groupBy(data.countries, 'languages[0].name');\r\n      setGroup(byLanguages);\r\n      setActive('language');\r\n    } else {\r\n      const byContinent = _.groupBy(data.countries, 'continent.name');\r\n      setGroup(byContinent);\r\n      setActive('continent');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Country search</h1>\r\n      <p>Find information about a country:</p>\r\n      <input\r\n        className=\"search-bar\"\r\n        placeholder=\"🔍 Type in a country name\"\r\n        onChange={(event) => {\r\n          if (_.isEmpty(group) === true) {\r\n            const byContinent = _.groupBy(data.countries, 'continent.name');\r\n            setGroup(byContinent);\r\n          }\r\n          setQuery(event.target.value);\r\n        }}\r\n      />\r\n      <div className=\"group-by\">\r\n        <h2>Group by:</h2>\r\n        <button\r\n          className={active === 'continent' ? 'group-btn active' : 'group-btn'}\r\n          onClick={groupBy}\r\n          value=\"Continent\"\r\n        >\r\n          Continent\r\n        </button>\r\n        <button\r\n          className={active === 'language' ? 'group-btn active' : 'group-btn'}\r\n          onClick={groupBy}\r\n          value=\"Language\"\r\n        >\r\n          Language\r\n        </button>\r\n      </div>\r\n\r\n      <ul className=\"country-list\">\r\n        {Object.entries(group).map(([key, value], index) => (\r\n          <div>\r\n            <h2 key={index}>{key}</h2>\r\n            <Card query={query} data={value} error={error} loading={loading} />\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card(props) {\r\n  if (props.loading) return 'Loading...';\r\n  if (props.error) return `Error! ${props.error.message}`;\r\n\r\n  return (\r\n    <div>\r\n      {props.data\r\n        .filter((country) => {\r\n          if (props.query === '') {\r\n            return;\r\n          } else if (\r\n            country.name.toLowerCase().includes(props.query.toLowerCase())\r\n          ) {\r\n            return country;\r\n          }\r\n        })\r\n        .map((country, index) => (\r\n          <div className=\"card\" key={index}>\r\n            <li>\r\n              <span>{country.emoji}</span>\r\n              <h2 className=\"country-name\"> {country.name}</h2>\r\n              <h3>\r\n                Capital City:\r\n                <p className=\"p\"> {country.capital}</p>\r\n              </h3>\r\n              <h3>\r\n                Country Code:\r\n                <p className=\"p\"> +{country.phone}</p>\r\n              </h3>\r\n            </li>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Card, SearchBar };\r\n","import React from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { SearchBar } from './components';\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <SearchBar />\n    </ApolloProvider>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}